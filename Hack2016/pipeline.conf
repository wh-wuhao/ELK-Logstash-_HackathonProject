# The # character at the beginning of a line indicates a commenlt. Use
# comments to describe your configuration.
input {
    file {
<<<<<<< HEAD
        path => "/home/tong/logs/ais-*.log"
=======
        path => "/Users/hwu/beta_logs/*.log"
>>>>>>> 8476b5f570c84f3b84fe9036c4f36c5786fe7a54
        start_position => beginning
        ignore_older => 0
    }
    http {
        response_headers =>{
           'Access-Control-Allow-Origin' => 'http://localhost:3000'
           'Access-Control-Allow-Methods' => 'GET,PUT,POST,DELETE,OPTIONS'
           'Access-Control-Allow-Headers' => 'Content-Type,Authorization,X-Requested-With,Content-Length,Accept,Origin'
           'Access-Control-Allow-Credentials' => 'true'
        }
    }
}
# The filter part of this file is commented out to indicate that it is
# optional.
 filter {
    if [headers][request_path] == '/perf' {
        #mutate{
        #     add_field => {"agent1"=>"%{[headers][http_user_agent]}"}
        #}
        useragent{
             source => "[headers][http_user_agent]"
             target => "ua"
        }
        ruby {
             code => "event['Network_Latency'] = event['responseEnd'] - event['fetchStart'];
                      event['Page_Load_After_Server_Response'] = event['loadEventEnd'] - event['responseEnd']"
        }
    }
    else {
        grok {
            patterns_dir => "/Users/hwu/rosetta/Hack2016/patterns"
            break_on_match => false
            match => { "message"=> "%{LEVEL:level}" }
        }
        grok {
            patterns_dir => "/Users/hwu/rosetta/Hack2016/patterns"
            break_on_match => false
            match => {"message"=> "%{METHOD:method}%{URIPATH:api_path}" }
        }
        grok {
            patterns_dir => "/Users/hwu/rosetta/Hack2016/patterns"
            break_on_match => false
            match => {"message"=> "%{LOGIN:login}" }
        }
        grok {
            break_on_match => false
<<<<<<< HEAD
            match => {"message"=> "%{DATE:date:date}" }
        }
        grok {
            break_on_match => false
            match => {"message"=> "%{TIME:time:time}" } 
        } 
        mutate {
            #split => { "api_path" => "/"}
=======
            match => {"message"=> "%{DATE:date}" }
        }
        grok {
            break_on_match => false
            match => {"message"=> "%{TIME:time}" }
>>>>>>> 8476b5f570c84f3b84fe9036c4f36c5786fe7a54
        }
        geoip {
            source => "clientip"
        }
    }
 }
output {
    elasticsearch {}
    file {
            path => "/Users/hwu/logstash-2.3.4/output.txt"
        }
    if [Page_Load_After_Server_Response] and [Page_Load_After_Server_Response] > 3000 {
        email {
            address => "10.118.10.80"
            port => "25"
            to => "hwu@apptio.com,TShen@apptio.com"
            #to => "hwu@apptio.com"
            from => "ElasticString@apptio.com"
            subject => "2016Hackathon - Elastic String Alert"
            body => "The loading of '%{Page}' page from ip(%{clientip}) is slow(%{Page_Load_After_Server_Response} milisecond)."
            htmlbody => "The loading of <b>'%{Page}'</b> page from ip(%{clientip}) is slow(<b>%{Page_Load_After_Server_Response}</b> milisecond)."
        }
        http {
            url => "https://hooks.slack.com/services/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"
            http_method => "post"
            format => "message"
            content_type => "application/json; charset=UTF-8"
            message => "{'text': 'The loading of %{Page} page from ip(%{clientip}) is slow(%{Page_Load_After_Server_Response} milisecond).','username': '2016Hackathon - ElasticString'}"
        }
    }
}
